package org.intellij.sdk.language;

import com.intellij.codeInsight.completion.*;
import com.intellij.codeInsight.lookup.LookupElement;
import com.intellij.codeInsight.lookup.LookupElementBuilder;
import com.intellij.patterns.PlatformPatterns;
import com.intellij.util.ProcessingContext;
import org.jetbrains.annotations.NotNull;

public class SqlppCompletionContributor extends CompletionContributor {

    private static final String[] SQLPP_KEYWORDS =
            {"ADAPTER", "ALL", "ALTER", "ANALYTICS", "AND", "ANY", "APPLY", "ARGS", "AS", "ASC", "AT",
                    "AUTOGENERATED", "BETWEEN", "BTREE", "BY", "CASE", "CAST", "CLOSED", "COLLECTION",
                    "COMPACT", "COMPACTION", "CONNECT", "CONNECTED", "CORRELATE", "CREATE", "CROSS", "CUBE",
                    "CURRENT", "DATASET", "DATAVERSE", "DECLARE", "DEFINITION", "DELETE", "DESC", "DISABLE", "DISCONNECT",
                    "DISTINCT", "DIV", "DROP", "ELEMENT", "ELSE", "ENABLE", "END", "ENFORCED", "EVERY", "EXCEPT", "EXCLUDE",
                    "EXISTS", "EXPLAIN", "EXTERNAL", "FEED", "FILTER", "FIRST", "FLATTEN", "FOLLOWING", "FOR", "FOREIGN",
                    "FROM", "FULL", "FULLTEXT", "FUNCTION", "GROUP", "GROUPING", "GROUPS", "HAVING", "HINTS", "IF", "IGNORE",
                    "IN", "INCLUDE", "INDEX", "INGESTION", "INNER", "INSERT", "INTERNAL", "INTERSECT", "INTO", "IS", "JOIN",
                    "KEY", "KEYWORD", "KNOWN", "LAST", "LEFT", "LET", "LETTING", "LIKE", "LIMIT", "LINK", "LOAD", "MISSING",
                    "MOD", "NGRAM", "NO", "NODEGROUP", "NOT", "NULL", "NULLS", "OFFSET", "ON", "OPEN", "OR", "ORDER", "OTHERS",
                    "OUTER", "OUTPUT", "OVER", "PARTITION", "PATH", "POLICY", "PRECEDING", "PRIMARY", "RANGE", "RAW",
                    "REFERENCES", "REFRESH", "REPLACE", "RESPECT", "RETURN", "RETURNING", "RETURNS", "RIGHT", "ROLLUP",
                    "ROW", "ROWS", "RTREE", "RUN", "SATISFIES", "SCOPE", "SECONDARY", "SELECT", "SET", "SETS", "SOME",
                    "START", "STOP", "SYNONYM", "TEMPORARY", "THEN", "TIES", "TO", "TYPE", "UNBOUNDED", "UNION ALL", "UNION",
                    "UNKNOWN", "UNNEST", "UPDATE", "UPSERT", "USE", "USING", "VALUE", "VALUED", "VIEW", "WHEN", "WHERE",
                    "WITH", "WRITE"};

    private static final String[] SQLPP_FUNC = {
            "ABS", "ACOS", "ARRAY_APPEND", "ARRAY_AVG", "ARRAY_CONCAT", "ARRAY_CONTAINS", "ARRAY_COUNT", "ARRAY_DISTINCT",
            "ARRAY_FLATTEN", "ARRAY_IFNULL", "ARRAY_INSERT", "ARRAY_INTERSECT", "ARRAY_LENGTH", "ARRAY_MAX",
            "ARRAY_MIN", "ARRAY_POSITION", "ARRAY_PREPEND", "ARRAY_PUT", "ARRAY_RANGE", "ARRAY_REMOVE", "ARRAY_REPEAT",
            "ARRAY_REPLACE", "ARRAY_REVERSE", "ARRAY_SORT", "ARRAY_STAR", "ARRAY_SUM", "ARRAY_SYMDIFF", "ARRAY_SYMDIFF1",
            "ARRAY_SYMDIFFN", "ARRAY_UNION", "ASIN", "ATAN", "ATAN2", "AVG", "CEIL", "CLOCK_LOCAL", "CLOCK_MILLIS",
            "CLOCK_STR", "CLOCK_TZ", "CLOCK_UTC", "CONCAT", "CONTAINS", "COS", "COUNT", "DATE_ADD_MILLIS", "DATE_ADD_STR",
            "DATE_DIFF_MILLIS", "DATE_DIFF_STR", "DATE_FORMAT_STR", "DATE_PART_MILLIS", "DATE_PART_STR",
            "DATE_RANGE_MILLIS", "DATE_RANGE_STR", "DATE_TRUNC_MILLIS", "DATE_TRUNC_STR", "DECODE_JSON", "DEGREES",
            "DURATION_TO_STR", "E", "ENCODE_JSON", "ENCODED_SIZE", "EXP", "FLOOR", "GREATEST", "IF_INF", "IF_MISSING",
            "IF_MISSING_OR_NULL", "IF_NAN", "IF_NAN_OR_INF", "IF_NULL", "IFINF", "IFMISSING", "IFMISSINGORNULL",
            "IFNAN", "IFNANORINF", "IFNULL", "INITCAP", "IS_ARRAY", "IS_ATOM", "IS_BOOL", "IS_BOOLEAN", "IS_NUM",
            "IS_NUMBER", "IS_OBJ", "IS_OBJECT", "IS_STR", "IS_STRING", "ISARRAY", "ISATOM", "ISBOOL", "ISBOOLEAN",
            "ISNUM", "ISNUMBER", "ISOBJ", "ISOBJECT", "ISSTR", "ISSTRING", "LEAST", "LENGTH", "LN", "LOG", "LOWER", "LTRIM",
            "MAX", "META", "MILLIS", "MILLIS_TO_LOCAL", "MILLIS_TO_STR", "MILLIS_TO_TZ", "MILLIS_TO_UTC",
            "MILLIS_TO_ZONE_NAME", "MIN", "MISSING_IF", "MISSINGIF", "NAN_IF", "NANIF", "NEGINF_IF", "NEGINFIF",
            "NOW_LOCAL", "NOW_MILLIS", "NOW_STR", "NOW_TZ", "NOW_UTC", "NULL_IF", "NULLIF", "OBJECT_ADD", "OBJECT_CONCAT",
            "OBJECT_INNER_VALUES", "OBJECT_LENGTH", "OBJECT_NAMES", "OBJECT_PAIRS", "OBJECT_PUT", "OBJECT_REMOVE",
            "OBJECT_RENAME", "OBJECT_REPLACE", "OBJECT_UNWRAP", "OBJECT_VALUES", "PAIRS", "PI", "POSINF_IF", "POSINFIF",
            "POSITION", "POWER", "RADIANS", "RANDOM", "REGEXP_CONTAINS", "REGEXP_LIKE", "REGEXP_POSITION", "REGEXP_REPLACE",
            "REPEAT", "REPLACE", "REVERSE", "ROUND", "RTRIM", "SIGN", "SIN", "SPLIT", "SQRT", "STR_TO_DURATION",
            "STR_TO_MILLIS", "STR_TO_TZ", "STR_TO_UTC", "STR_TO_ZONE_NAME", "SUBSTR", "SUM", "TAN", "TITLE", "TO_ARRAY",
            "TO_ATOM", "TO_BOOL", "TO_BOOLEAN", "TO_NUM", "TO_NUMBER", "TO_OBJ", "TO_OBJECT", "TO_STR", "TO_STRING",
            "TOARRAY", "TOATOM", "TOBOOL", "TOBOOLEAN", "TONUM", "TONUMBER", "TOOBJ", "TOOBJECT", "TOSTR",
            "TOSTRING", "TRIM", "TRUNC", "TYPE", "TYPENAME", "UPPER", "UUID", "WEEKDAY_MILLIS", "WEEKDAY_STR"

    };

    public SqlppCompletionContributor() {
        extend(CompletionType.BASIC,
                PlatformPatterns.psiElement(),
                new CompletionProvider<CompletionParameters>() {

                    public void addCompletions(@NotNull CompletionParameters parameters,
                                               @NotNull ProcessingContext context,
                                               @NotNull CompletionResultSet resultSet) {

                        for (String keyword : SQLPP_KEYWORDS) {
                            LookupElementBuilder elementBuilder = LookupElementBuilder.create(keyword);
                            LookupElement lookupElement = elementBuilder.withCaseSensitivity(false);
                            resultSet.addElement(lookupElement);
                        }
                        for (String keyword : SQLPP_FUNC) {
                            LookupElementBuilder elementBuilder = LookupElementBuilder.create(keyword);
                            LookupElement lookupElement = elementBuilder.withCaseSensitivity(false);
                            resultSet.addElement(lookupElement);
                        }
                    }
                }
        );
    }
}
