{

  parserClass="generated.GeneratedParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  elementTypeHolderClass="generated.GeneratedTypes"
  elementTypeClass="org.intellij.sdk.language.psi.SqlppElementType"
  tokenTypeClass="org.intellij.sdk.language.psi.SqlppTokenType"
}

sequence ::= statement ( COLON statement )* COLON?

statement ::= dcl-statement |
              ddl-statement |
              dml-statement |
              dql-statement |
              tcl-statement |
              utility-statement

ddl-statement ::= create-statement
                | drop-statement
                | other-statement

create-statement ::= create-scope
                   | create-collection
                   | create-primary-index
                   | create-index
                   | create-function

drop-statement ::= drop-scope
                 | drop-collection
                 | drop-primary-index
                 | drop-index
                 | drop-function

other-statement ::= alter-index
                  | build-index
                  | execute-function


create-scope ::= CREATE SCOPE ( namespace-ref SEMICOLON )? bucket-ref DOT scope-ref ( IF NOT EXISTS )?

create-collection ::= CREATE COLLECTION ( ( namespace-ref SEMICOLON )? bucket-ref DOT scope-ref DOT )?
                      collection-ref ( IF NOT EXISTS )?



drop-scope ::= DROP SCOPE ( namespace-ref SEMICOLON )? bucket-ref DOT scope-ref ( IF EXISTS )?



drop-collection ::= DROP COLLECTION ( ( namespace-ref SEMICOLON )? bucket-ref DOT scope-ref DOT )?
                    collection-ref ( IF EXISTS )?


create-primary-index ::= CREATE PRIMARY INDEX index-name? ( IF NOT EXISTS )?
                         ON keyspace-ref index-using? index-with?

index-using ::= USING GSI

index-with ::= WITH expr

create-index ::= CREATE INDEX index-name ( IF NOT EXISTS )? ON keyspace-ref
                 LPAREN index-key lead-key-attribs? ( ( COMMA index-key key-attribs? )+ )? RPAREN
                 index-partition? where-clause? index-using? index-with?

index-key ::= expr | array-expr

lead-key-attribs ::= index-order include-missing? | include-missing index-order?

key-attribs ::= index-order

include-missing ::= INCLUDE MISSING

index-order ::= ASC | DESC

array-expr ::= full-array-expr | simple-array-expr

full-array-expr ::= ( ALL | DISTINCT ) ARRAY expr
                    FOR var ( IN | WITHIN ) expr
                    ( COMMA var ( IN | WITHIN ) expr )* ( WHEN cond )? END

simple-array-expr ::= ( ALL | DISTINCT ) expr

pairs-function ::= PAIRS LPAREN ( SELF | index-key-object ) RPAREN

index-key-object ::= expr

index-partition ::= PARTITION BY HASH LPAREN partition-key-expr
                    ( COMMA partition-key-expr )* RPAREN

partition-key-expr ::= expr


alter-index ::= ALTER INDEX ( index-path DOT index-name | index-name ON keyspace-ref )
                index-using? index-with

build-index ::= BUILD INDEX ON keyspace-ref LPAREN index-term ( COMMA index-term)* RPAREN
                index-using?

index-term ::= index-name | subquery-expr


drop-primary-index ::= DROP PRIMARY INDEX ( IF EXISTS )? ON keyspace-ref
                       index-using?

drop-index ::= DROP INDEX ( index-path DOT index-name ( IF EXISTS )? |
                index-name ( IF EXISTS )? ON keyspace-ref ) index-using?

index-path ::= keyspace-full | keyspace-prefix | keyspace-partial

keyspace-full ::= namespace-ref SEMICOLON bucket-ref DOT scope-ref DOT collection-ref

keyspace-prefix ::= ( namespace-ref SEMICOLON )? bucket-ref

create-function ::= create-function-inline | create-function-external

create-function-inline ::= CREATE ( OR REPLACE )? FUNCTION function-ref LPAREN params? RPAREN
                           ( IF NOT EXISTS )?
                           ( LBRACE body RBRACE | LANGUAGE INLINE AS body )

create-function-external ::= CREATE ( OR REPLACE )? FUNCTION function-ref LPAREN params? RPAREN
                             ( IF NOT EXISTS )?
                             LANGUAGE JAVASCRIPT AS obj AT

function-ref ::= ( namespace-ref SEMICOLON ( bucket-ref DOT scope-ref DOT )? )? identifier-ref

params ::= identifier-ref ( COMMA identifier-ref )* | ELLIPSIS

body ::= expr

obj ::= str

drop-function ::= DROP FUNCTION function-ref ( IF EXISTS )?

execute-function ::= EXECUTE FUNCTION function-ref LPAREN ( expr ( COMMA expr )* )? RPAREN

dml-statement ::= delete-statement
                | insert-statement
                | merge-statement
                | update-statement
                | upsert-statement



delete-statement ::= DELETE FROM target-keyspace use-keys-clause? where-clause?
            limit-clause? returning-clause?

insert-statement ::= INSERT INTO target-keyspace ( insert-values | insert-select )
            returning-clause?

insert-values ::= ( LPAREN PRIMARY? KEY COMMA VALUE ( COMMA OPTIONS )? RPAREN )? values-clause

values-clause ::= VALUES  LPAREN key-expr COMMA value-expr ( COMMA options )? RPAREN
            ( COMMA VALUES? LPAREN key-expr COMMA value-expr ( COMMA options )? RPAREN )*

insert-select ::= LPAREN PRIMARY? KEY key-expr ( COMMA VALUE value-expr )?
                   ( COMMA OPTIONS options )? RPAREN select-statement


merge-statement ::= MERGE INTO ( ansi-merge | lookup-merge ) limit-clause? returning-clause?

ansi-merge ::= target-keyspace use-index-clause USING ansi-merge-source
               ansi-merge-predicate ansi-merge-actions

ansi-merge-source ::= ( merge-source-keyspace | merge-source-subquery | merge-source-expr )
                      ansi-join-hints?

ansi-merge-predicate ::= ON expr

ansi-merge-actions ::= merge-update? merge-delete? ansi-merge-insert?

ansi-merge-insert ::= WHEN NOT MATCHED THEN INSERT LPAREN KEY? key-expr
                      ( COMMA VALUE? value-expr )? ( COMMA OPTIONS? options )? RPAREN where-clause?

lookup-merge ::= target-keyspace USING lookup-merge-source lookup-merge-predicate
                 lookup-merge-actions

lookup-merge-source ::= merge-source-keyspace use-clause? |
                        merge-source-subquery |
                        merge-source-expr

lookup-merge-predicate ::= ON PRIMARY? KEY expr

lookup-merge-actions ::= merge-update? merge-delete? lookup-merge-insert?

lookup-merge-insert ::= WHEN NOT MATCHED THEN INSERT expr where-clause?

merge-source-keyspace ::= keyspace-ref ( AS? alias )?

merge-source-subquery ::= subquery-expr AS? alias

merge-source-expr ::= expr ( AS? alias )?

merge-update ::= WHEN MATCHED THEN UPDATE set-clause? unset-clause? where-clause?

merge-delete ::= WHEN MATCHED THEN DELETE where-clause?

update-statement ::= UPDATE target-keyspace use-keys? set-clause? unset-clause?
            where-clause? limit-clause? returning-clause?


use-keys ::= str

upsert-statement ::= UPSERT INTO target-keyspace ( insert-values | insert-select )
            returning-clause?


target-keyspace ::= keyspace-ref ( AS? alias )?

returning-clause ::= RETURNING (result-expr (COMMA result-expr)* |
                    (RAW | ELEMENT | VALUE) expr)

set-clause ::= SET ( path EQUAL expr update-for? )
               ( COMMA (  path EQUAL expr update-for? ) )*

unset-clause ::= UNSET path update-for? (COMMA path update-for?)*

update-for ::= (FOR (name-var SEMICOLON)? var (IN | WITHIN) path
               (COMMA (name-var SEMICOLON)? var (IN | WITHIN) path)* )+
               (WHEN cond)? END
/* end::update-for[] */

key-expr ::= expr
value-expr ::= expr

/* Data Query Language */

dql-statement ::= select-statement |
                  infer-statement |
                  update-statistics

/***************
 * N1QL SELECT *
 ***************/

select-statement ::= select-term ( set-op select-term )* order-by-clause? limit-clause? offset-clause?

select-term ::= subselect | LPAREN select-statement RPAREN

subselect ::= select-from | from-select

select-from ::= with-clause? select-clause from-clause? let-clause? where-clause? group-by-clause? window-clause?

from-select ::= with-clause? from-clause let-clause? where-clause? group-by-clause? window-clause? select-clause

set-op ::= ( UNION | INTERSECT | EXCEPT ) ALL?



with-clause ::= WITH alias AS LPAREN ( select-statement | expr ) RPAREN
                 ( COMMA alias AS LPAREN ( select-statement | expr ) RPAREN )*

alias ::= identifier-ref



select-clause ::= SELECT hint-comment? projection

projection ::= ( ALL | DISTINCT )? ( result-expr ( COMMA result-expr )* |
               ( RAW | ELEMENT | VALUE ) expr ( AS? alias )? )

result-expr ::= ( path DOT )? ASTERISK | expr ( AS? alias )?

path ::= identifier-ref ( LBRACKET expr RBRACKET )* ( DOT identifier-ref ( LBRACKET expr RBRACKET )* )*



from-clause ::= FROM from-terms

from-terms ::= ( from-keyspace | from-subquery | from-generic )
               ( join-clause | nest-clause | unnest-clause )* comma-separated-join*

from-keyspace ::= keyspace-ref ( AS? alias )? use-clause?

keyspace-ref ::= keyspace-path | keyspace-partial

keyspace-path ::= ( namespace-ref SEMICOLON )? bucket-ref ( DOT scope-ref DOT collection-ref )?

keyspace-partial ::= collection-ref

namespace-ref ::= identifier-ref

bucket-ref ::= identifier-ref

scope-ref ::= identifier-ref

collection-ref ::= identifier-ref

from-subquery ::= subquery-expr AS? alias

subquery-expr ::= LPAREN select-statement RPAREN

from-generic ::= expr ( AS alias )?



join-clause ::= ansi-join-clause | lookup-join-clause | index-join-clause



ansi-join-clause ::= ansi-join-type? JOIN ansi-join-rhs ansi-join-predicate

ansi-join-type ::= INNER | ( LEFT | RIGHT ) OUTER?

ansi-join-rhs ::= rhs-keyspace | rhs-subquery | rhs-generic

rhs-keyspace ::= keyspace-ref ( AS? alias )? ansi-join-hints?

rhs-subquery ::= subquery-expr AS? alias

rhs-generic ::= expr ( AS? alias )?

ansi-join-hints ::= use-hash-hint | use-nl-hint | multiple-hints

use-hash-hint ::= USE use-hash-term

use-hash-term ::= HASH LPAREN ( BUILD | PROBE ) RPAREN

use-nl-hint ::= USE use-nl-term

use-nl-term ::= NL

multiple-hints ::= USE ( ansi-hint-terms other-hint-terms |
                           other-hint-terms ansi-hint-terms )

ansi-hint-terms ::= use-hash-term | use-nl-term

other-hint-terms ::= use-index-term | use-keys-term

ansi-join-predicate ::= ON expr



lookup-join-clause ::= lookup-join-type? JOIN lookup-join-rhs lookup-join-predicate

lookup-join-type ::= INNER | ( LEFT OUTER? )

lookup-join-rhs ::= keyspace-ref ( AS? alias )?

lookup-join-predicate ::= ON PRIMARY? KEYS expr



index-join-clause ::= index-join-type? JOIN index-join-rhs index-join-predicate

index-join-type ::= INNER | ( LEFT OUTER? )

index-join-rhs ::= keyspace-ref ( AS? alias )?

index-join-predicate ::= ON PRIMARY? KEY expr FOR alias



comma-separated-join ::= COMMA ( rhs-keyspace | rhs-subquery | rhs-generic )



nest-clause ::= ansi-nest-clause | lookup-nest-clause | index-nest-clause



ansi-nest-clause ::= ansi-nest-type? NEST ansi-nest-rhs ansi-nest-predicate

ansi-nest-type ::= INNER | ( LEFT OUTER? )

ansi-nest-rhs ::= keyspace-ref ( AS? alias )?

ansi-nest-predicate ::= ON expr



lookup-nest-clause ::= lookup-nest-type? NEST lookup-nest-rhs lookup-nest-predicate

lookup-nest-type ::= INNER | ( LEFT OUTER? )

lookup-nest-rhs ::= keyspace-ref ( AS? alias )?

lookup-nest-predicate ::= ON KEYS expr



index-nest-clause ::= index-nest-type? NEST index-nest-rhs index-nest-predicate

index-nest-type ::= INNER | ( LEFT OUTER? )

index-nest-rhs ::= keyspace-ref ( AS? alias )?

index-nest-predicate ::= ON KEY expr FOR alias



unnest-clause ::= unnest-type? ( UNNEST | FLATTEN ) expr ( AS? alias )?

unnest-type ::= INNER | ( LEFT OUTER? )



use-clause ::= use-keys-clause | use-index-clause

use-keys-clause ::= USE use-keys-term

use-keys-term ::= PRIMARY? KEYS expr

use-index-clause ::= USE use-index-term

use-index-term ::= INDEX LPAREN index-ref ( COMMA index-ref )* RPAREN

index-ref ::= index-name? index-type?

index-name ::= identifier-ref

index-type ::= USING ( GSI | FTS )



let-clause ::= LET alias EQUAL expr ( COMMA alias EQUAL expr )*



where-clause ::= WHERE cond

cond ::= expr

group-by-clause ::= GROUP BY group-term ( COMMA group-term )*
                    letting-clause? having-clause? | letting-clause

group-term ::= expr ( (AS)? alias )?

letting-clause ::= LETTING alias EQUAL expr ( COMMA alias EQUAL expr )*

having-clause ::= HAVING cond



window-clause ::= WINDOW window-declaration ( COMMA window-declaration )*

window-declaration ::= window-name AS LPAREN window-definition RPAREN

window-name ::= identifier-ref

window-definition ::= window-ref? window-partition-clause? window-order-clause?
                      window-frame-clause?

window-ref ::= identifier-ref

window-partition-clause ::= PARTITION BY expr ( COMMA expr )*

window-order-clause ::= ORDER BY ordering-term ( COMMA ordering-term )*

window-frame-clause ::= ( ROWS | RANGE | GROUPS ) window-frame-extent
                        window-frame-exclusion?

window-frame-extent ::= UNBOUNDED PRECEDING | CURRENT ROW |
                        BETWEEN ( UNBOUNDED PRECEDING | CURRENT ROW | ( PRECEDING | FOLLOWING ) )
                            AND ( UNBOUNDED FOLLOWING | CURRENT ROW | ( PRECEDING | FOLLOWING ) )

window-frame-exclusion ::= EXCLUDE ( CURRENT ROW | GROUP | TIES | NO OTHERS )



order-by-clause ::= ORDER BY ordering-term ( COMMA ordering-term )*

ordering-term ::= expr ( ASC | DESC )? ( NULLS ( FIRST | LAST ) )?



limit-clause ::= LIMIT expr



offset-clause ::= OFFSET expr


hint-comment ::= block-hint-comment | line-hint-comment

block-hint-comment ::= BLOCK_HINT_OPEN hints COMMENT_CLOSE

line-hint-comment ::= LINE_HINT_OPEN hints

hints ::= simple-hint-sequence | json-hint-object

simple-hint-sequence ::= simple-hint+

simple-hint ::= ordered-hint-simple
              | gsi-hint-simple
              | fts-hint-simple
              | hash-hint-simple
              | nl-hint-simple

ordered-hint-simple ::= ORDERED

gsi-hint-simple ::= INDEX LPAREN keyspace-statement RPAREN

keyspace-statement ::= KEYSPACE identifier-ref

fts-hint-simple ::= INDEX_FTS LPAREN keyspace-statement RPAREN

nl-hint-simple ::= USE_NL LPAREN ( keyspace-statement )+ RPAREN

hash-hint-simple ::= USE_HASH LPAREN ( keyspace-statement ( SLASH ( BUILD | PROBE ) )? )+ RPAREN

json-hint-object ::= LBRACE json-hint (COMMA json-hint )* RBRACE

json-hint ::= ordered-hint-json
             | gsi-hint-json
             | fts-hint-json
             | hash-hint-json
             | nl-hint-json

ordered-hint-json ::= QUOTED_ORDERED SEMICOLON TRUE

gsi-hint-json ::= QUOTED_INDEX SEMICOLON ( index-array | index-object )

fts-hint-json ::= QUOTED_INDEX_FTS SEMICOLON ( index-array | index-object )

nl-hint-json ::= QUOTED_USE_NS SEMICOLON ( keyspace-array | keyspace-object )

hash-hint-json ::= QUOTED_USE_HASH  ( hash-array | hash-object )

index-array ::= LBRACKET index-object ( COMMA index-object )* RBRACKET

index-object ::= LBRACE keyspace-property COMMA indexes-property RBRACE

indexes-property ::= QUOTED_INDEXES SEMICOLON ( NULL
                                     | DQUOTE index DQUOTE
                                     | LBRACKET DQUOTE index DQUOTE ( COMMA DQUOTE index DQUOTE )* RBRACKET )

keyspace-array ::= LBRACKET keyspace-object ( COMMA keyspace-object )* RBRACKET

keyspace-object ::= LBRACE keyspace-property RBRACE

keyspace-property ::= ( QUOTED_KEYSPACE | QUOTED_ALIAS ) SEMICOLON DQUOTE keyspace-statement DQUOTE

hash-array ::= LBRACKET hash-object ( COMMA hash-object )* RBRACKET

hash-object ::= LBRACE keyspace-property ( COMMA option-property )? RBRACE

option-property ::= QUOTED_OPTION SEMICOLON ( QUOTED_BUILD | QUOTED_PROBE | NULL )

/***************
 * Expressions *
 ***************/

expr ::= ( literal | identifier-ref | LPAREN expr RPAREN )
        (
             arithmetic-term |
             comparison-term |
             concatenation-term |
             logical-term |
             case-expr |
             collection-expr |
             nested-expr |
             function-call |
             subquery-expr
         )*



literal ::= str | nbr | bool | NULL | MISSING

str ::= double-quoted-string | single-quoted-string

double-quoted-string ::= DQUOTE double-quoted-string-character* DQUOTE

single-quoted-string ::= QUOTE single-quoted-string-character* QUOTE

double-quoted-string-character ::= (
                                        ESCAPE_SEQUENCE
                                        | ESCAPED_DQUOTE
                                       | STRING_CHAR
                                   )

single-quoted-string-character ::= (
                                        ESCAPE_SEQUENCE
                                        | ESCAPED_QUOTE
                                        | STRING_CHAR
                                   )

bool ::= TRUE | FALSE


identifier-ref ::= IDENTIFIER | ESCAPED_IDENTIFIER

arithmetic-term ::= PLUS expr |
                    ASTERISK expr |
                    SLASH expr |
                    PERCENT expr |
                    MINUS_SIGN expr



comparison-term ::= relational-expr |
                    between-expr |
                    like-expr |
                    is-expr

relational-expr ::= EQUAL expr |
                    DOUBLE_EQUAL expr |
                    NOT_EQUAL expr |
                    LESSTHAN_OR_MORETHAN expr |
                    MORETHAN expr |
                    MORETHAN_OR_EQUAL expr |
                    LESSTHAN expr |
                    LESSTHAN_OR_EQUAL expr

between-expr ::= NOT? BETWEEN expr AND expr

like-expr ::= NOT? LIKE expr

is-expr ::= IS NOT? NULL |
            IS NOT? MISSING |
            IS NOT? VALUED



concatenation-term ::= DBLPIPE expr



logical-term ::= and-expr | or-expr | not-expr

and-expr ::= AND cond

or-expr ::= OR cond

not-expr ::= NOT cond



case-expr ::= simple-case-expr | searched-case-expr

simple-case-expr ::= CASE expr (WHEN expr THEN expr)+ (ELSE expr)? END

searched-case-expr ::= CASE (WHEN cond THEN expr)+ (ELSE expr)? END



collection-expr ::= exists-expr | in-expr | within-expr | range-cond

exists-expr ::= EXISTS expr

in-expr ::= NOT? IN expr

within-expr ::= NOT? WITHIN expr

range-cond ::= ( ( ANY | SOME ) ( AND EVERY )? | EVERY ) range-expr SATISFIES cond END

range-expr ::= ( name-var SEMICOLON )? var ( IN | WITHIN ) expr
            ( COMMA ( name-var SEMICOLON )? var ( IN | WITHIN ) expr )*

var ::= identifier-ref
name-var ::= identifier-ref





array-expr ::= LBRACKET ( expr ( COMMA expr )* )? RBRACKET



nested-expr ::= field-expr | element-expr | slice-expr

field-expr ::= DOT ( identifier-ref | ( ( escaped-identifier | LBRACKET expr RBRACKET ) 'i'? ) )

element-expr ::= LBRACKET expr RBRACKET

slice-expr ::= LBRACKET expr SEMICOLON expr? RBRACKET


function-call ::= builtin-function |
                  ordinary-function |
                  aggregate-function |
                  window-function

function-name ::= identifier-ref
aggregate-function-name ::= identifier-ref
window-function-name ::= identifier-ref

ordinary-function ::= function-name LPAREN ( expr ( COMMA expr )* )? RPAREN

builtin-function ::= FUNCS LPAREN ( expr ( COMMA expr )* )? RPAREN

aggregate-function ::= aggregate-function-name LPAREN ( aggregate-quantifier? expr |
                       ( path DOT )? ASTERISK ) RPAREN filter-clause? over-clause?

aggregate-quantifier ::= ALL | DISTINCT

filter-clause ::= FILTER LPAREN WHERE cond RPAREN

window-function ::= window-function-name LPAREN window-function-arguments RPAREN
                    window-function-options? over-clause

window-function-arguments ::= ( expr ( COMMA expr ( COMMA expr )? )? )?

window-function-options ::= nthval-from? nulls-treatment?

nthval-from ::= FROM ( FIRST | LAST )

nulls-treatment ::= ( RESPECT | IGNORE ) NULLS

over-clause ::= OVER ( LPAREN window-definition RPAREN | window-ref )



subquery-expr ::= LPAREN select-statement RPAREN


/************
 * Comments *
 ************/

comment ::= block-comment

block-comment ::= BLOCK_COMMENT_OPEN (  LF )* COMMENT_CLOSE



tcl-statement ::= begin-transaction
                | set-transaction
                | savepoint-statement
                | rollback-transaction
                | commit-transaction

begin-transaction ::= ( BEGIN | START ) ( WORK | TRAN | TRANSACTION )
                      ( ISOLATION LEVEL READ COMMITTED )?

set-transaction ::= SET TRANSACTION ISOLATION LEVEL READ COMMITTED

savepoint-statement ::= SAVEPOINT savepointname

rollback-transaction ::= ROLLBACK ( WORK | TRAN | TRANSACTION )?
                       ( TO SAVEPOINT savepointname )?

commit-transaction ::= COMMIT ( WORK | TRAN | TRANSACTION )?

savepointname ::= identifier-ref



utility-statement ::= advise-statement
                    | explain-statement

advise-statement ::= ADVISE INDEX? ( select-statement | update-statement | delete-statement | merge-statement )

explain-statement ::= EXPLAIN statement

infer-statement ::= INFER ( COLLECTION | KEYSPACE )? keyspace-ref ( WITH options )?


/***********************
 * Prepared Statements *
 ***********************/


name ::= identifier-ref
parameters ::= array-expr

/**************
 * Statistics *
 **************/

update-statistics ::= update-statistics-expr | update-statistics-index | update-statistics-delete

update-statistics-expr ::= ( UPDATE STATISTICS FOR? |
                             ANALYZE ( KEYSPACE | COLLECTION)? )
                             keyspace-ref LPAREN index-key ( COMMA index-key )* RPAREN index-with?

update-statistics-index ::= ( UPDATE STATISTICS FOR | ANALYZE )
                              index-clause index-using?  index-with?

index-clause ::= INDEX ( index-path DOT index-name | index-name ON keyspace-ref )

update-statistics-indexes ::= ( UPDATE STATISTICS FOR? |
                                ANALYZE ( KEYSPACE | COLLECTION)? )
                                keyspace-ref indexes-clause index-using? index-with?

indexes-clause ::= INDEX ( LPAREN ( index-name ( COMMA index-name )* | subquery-expr ) RPAREN |
                             ALL )

update-statistics-delete ::= ( UPDATE STATISTICS FOR? |
                               ANALYZE ( KEYSPACE | COLLECTION)? )
                               keyspace-ref delete-clause

delete-clause ::= DELETE ( delete-expr | delete-all )

delete-expr ::= STATISTICS? LPAREN index-key ( COMMA index-key )* RPAREN

delete-all ::= ALL | STATISTICS

/* Data Control Language */

dcl-statement ::= grant-statement
                | revoke-statement

/* tag::grant[] */
grant-statement ::= GRANT role ( COMMA role )* ( ON keyspace-ref ( COMMA keyspace-ref )* )?
          TO user ( COMMA user )*
/* end::grant[] */

/* tag::revoke[] */
revoke-statement ::= REVOKE role ( COMMA role )* ( ON keyspace-ref ( COMMA keyspace-ref )* )?
           FROM user ( COMMA user )*
/* end::revoke[] */

role ::= identifier-ref
user ::= identifier-ref